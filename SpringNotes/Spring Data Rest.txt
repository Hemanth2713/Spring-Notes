Spring Data Rest

**Spring Data Rest Introduction**

In this section, we'll talk about Spring Data Rest.

Now think about the application which we have built. Now it doesn't matter. Is it for a job or for a student? When you talk about building a web application where you have a database as well, we basically go with multiple layers. Right.

So when a client sends a request, the request goes to the controller. Controller says, hey, you know, my job is to only accept data or accept the request and then respond. But if you want to do any processing, that will be done by service, and service says, okay, my job is processing, but what if you want to maybe get some data from the database?

Now that's where it will talk to the repository. And repository says, okay, it's my job to connect to the database. So I will do it. So repository connects to the database, fetches data.

So we have all these layers. Right now, what we have understood till this point is if you want to build a controller layer, we have to use a class. And that class has to be a controller. So we use `@Controller` on top of your class. On the other hand, if you want to do any processing, you will do that in service, and then in repository. Also, we have used an annotation called `@Repository`.

Now you can write all your JDBC code inside the repository. But then we have not done that, right. We have used something called Spring Data JPA. Now it says you don't have to worry about the queries or something. I will take care of it. You simply ask me what you want. I will give it to you. I mean, most of it. If you have something very advanced, you have to manually write the query for it. But then Spring Data JPA helps you to reduce the number of lines in your code.

Now if you talk about Spring Data. So in Spring Data JPA, we have Spring Data, which is actually a project inside Spring which has multiple modules inside it. So basically, Spring Data has something called Spring Data JPA we talked about. It also has something called Rest.

Now what it says is if you look at all the layers, if you talk about your, let's say start with repository, repository says you don't have to write a lot of code. I can simplify it for you. And then I will give you certain functions if you want to use it. Now if you talk about the service, of course, in the service layer, we have to write a lot of code, because when you talk about business logic, if you want to process something, you will do that in service.

But in our application, we are not writing a lot of code inside service. The reason is we are not doing much processing or logical stuff inside our code. So service is basically responsible in our application to just connect with the repository, right. Hey, I want this because I got asked this from my controller. You give it to me. Now controller, also, if you look at our controller APIs, we have not done much. We have just written the mapping, and we are calling a service. Even we are not doing any processing inside the controller.

So the Spring people thought, can we just simplify this more? And what if we can remove the service layer in our project because, specific to our project, not in general. So in our project, the service layer is of no use because we are just doing CRUD operations, so we can remove the service layer. What about the controller? What if you can remove the controller? I know you will be thinking, how is that possible? Because we need something to accept the request.

Yes, we need something, but that doesn't mean that you have to build it. What if someone else will give it to you? And that's where we have this project called Spring Data Rest, which, if you are using it, you don't even have to create a controller. I know you don't trust me. Let's do it.

**Creating a Data Rest Project**

So now, let's create a project. Of course, I don't want to touch my existing project. Let's create one in which we'll try to reuse the code which we already have instead of building from scratch.

So what we'll do is we'll go to our website, which is Spring Initializr, and we'll say, I'm building a Maven project. This is the Spring version I'm going to use. And then I want to say this is `com.telusko`, that's my group ID. The artifact I want to say is `Spring-data-rest-demo`. And I'm going to select Java 21 because that's what I'm using.

Dependencies. Now, this is tricky. We do need JPA for sure because we have to connect with the database. But what about the web? Remember when we build a web application, we have always added web. Here, we'll not do that. What we will do is we'll add something called REST. So if you can see, we have an option here called Rest Repositories, and see what it says. It says exposing the Spring Data repositories or REST via Spring Data Rest.

So if you select this, and that's it, you just have... You just need these two dependencies to work with your Spring Data Rest, but also the database which we're using is Postgres. So we need a dependency for Postgres, which is a driver, and that's it. Click on generate, you will get your project.

It's time to unzip the project and open that in IntelliJ. So unpacking done. I will open the project now. So the project is open here. This is a new project. This is the earlier one, which we were doing.

Now, if you compare the `pom.xml` file, we have added only three dependencies. The starter JPA, the starter data REST, and the Postgres. Okay? Nothing changes here apart from this. I will just close this. Yeah, we do need Lombok. I forgot to add Lombok.

What I'll do is I will just go back to my `pom.xml` and I will get the Lombok from here and paste it on this. Anything else I needed from this project? No, looks good. That's the first thing you have to do.

Next, I want these particular classes. So I want the `JobPost` and `Repo` because this will not change, right? We do need `Repo`. So what I will do is I will create two packages inside this. So let me go back to my new project, expand the `src/main`, and this, first of all, let me create a package and let's name this as the `model` package because that's where the `JobPost` will go.

And let me create one more package, which will be your, not service. This is `repo`, right? And then I can actually now copy those two things. So first I need `JobPost`. We'll paste that in the `model`. That's done.

Next, I need the `Repo`. I will put that in this `repo` folder. Done. Okay? Now the only thing is we have to import the right packages for both. And Lombok is not refreshed. So after adding the packages in the `pom.xml`, we need to reload the Maven, just doing that.

Okay, that's done. There's no problem with the Lombok dependencies now. And if I go back to my `Repo`, it is asking you for the `JobPost`. I do want `JobPost`. So import, and just to keep this clean, I will just remove everything else from here. Done.

So you can see our `Repo` is so clean now, it's even providing you this option, right? But yeah, let's go for the default one. Let's not even use this. Let's go with the default operations we have. Okay?

And now I want to make one more change in the `application.properties`, because we were setting with the database, right? So what I will do is I will look back at my old project in the `application.properties`. I just need to use this and paste it here because this is how you will connect with the database, right? The same settings.

And I'm going to use the same table, right? So the table name is `JobPost`. So I will be using the same thing. And that's it. We have done with the changes.

And if you compare the older project, we do have a controller here with so many lines of code. Of course, we'll only focus on the repositories. But if you see `Repo`, okay, same. We don't even need the service layer because we are not using the service layer that much.

So if you go back to the new project, we only have this tool. Now what do you think? Will it work? Maybe, let's try it out in the next video, and we will see if this works.

**Running the Project**

And now let's see if it works. So what I will do is I will just go back to my main application. And here let me say run. Now even if you run this, there are no controllers, right? How will it be exposed? Let's try.

So when you run this code, of course, you have to enable the Lombok processing. It will take some time to run, provided I'm not using the port number in some other projects. Okay, no other till this point. And Tomcat started, okay. That's good. There's no error.

But the thing is, will it work? And what will be the URL? Now, since we don't have a controller, we have not specified our own URLs, right? So what you have to do is, if you go back to Postman, of course, this will not work now. But then `jobPosts` work. If I say enter, you can see we got all the posts.

The first one Java developer, the second one Python developer, and the third one, fourth one, and fifth one. Okay. And we got all the links, but now we're thinking, how exactly are we going to get, let's say, one particular job.

So let's say I want to search for the first job. How will you get it? And that's why, if you can see, we also have a link here. Now this is called HATEOAS. So basically, what it says is, if you are responding with data, also mention where you will find other data.

And that's why you can see we got this type of data here. So we got links as well. So when you click on this link and say send, you will get the data for the first one. If you want the second one, so let me go back to my earlier request. If you want the second one, you can hit this, right.

So that's how everything is built. So all these controllers are actually built with the help of the repository layer. So in the repository, it says what are the methods you have. And based on that, it creates those links for you. Right. So this is how basically it works.

Now the question arises, how are you going to do, let's say, addition, deletion. Let's try that in the upcoming videos.

**Update and Delete**

So now let's try to update and delete. So of course, for update, we have to select Update Query here. But I also want data, right. So what I will do is I will just send the request for one. Because what I want to update, I want to update something.

Let's say I want to update the third post. Right. So this is what I want to update. I want to update with, let's say, instead of React, I want it to be a Front End Developer. And for this, what I will do is I will just copy this. I don't want to append the links, so just copy this.

I will put a PUT request. I will send us a PUT request. And in the headers, nothing changes. In the body, basically, I have to go to the Raw, and I want to submit a JSON format with the data. So I also want to complete this curly brackets. Done.

So you can see this is my JSON request. You have to make sure that you don't copy the links. And we got the array. And now instead of saying React, I would say Front End Developer, okay, everything else remains the same. And maybe I want to change the experience to, let's say, one, okay, this is the data that I have, and I'm sending a PUT request now.

Okay. Now with this, you just have to click on send. But then we have not specified the, uh, role. Okay. We have specified that in the post three. So you can see we are updating the third one. Click on send.

I'm not sure if this will work. Let's try, and it says okay, something has changed. You can see this is a new response which we got. Is it, maybe. Let's verify that in the database. That's the real test, right.

So if you go back to your database, and this is the old data, you can see the old data is still with React Developer, and the experience is three. Let me say view the data all once again. View all rows. Still waiting, and we got it.

You can see it says Front End Developer and Experience one year. So yeah, update also works. What about delete? So what I will do is I will go back to my thing, click on delete, same URL. You can see your URL is not changing, the method is changing.

And of course, in the raw, you're not supposed to send anything, so you click on none. And now with this, let me delete the third one. Delete. Okay. We got okay. And with the same response, let me go back to my database just to verify this.

So right-click here, say view all rows, and gone. So ID three gone. Is that simple. So basically, that's how you also update and delete.

So if you just want to build a RESTful web service, and if you already have a repository which is your JPA repository layer already, you simply have to use Spring Data Rest. It will give you the controllers as well. So this project makes your work very, very easy.

And if you see the code once again, it's so small. Let me just close this. Another window. This is your Spring Data Rest project, and the only files we have are the repository layer and the model layers.

---

This version aligns paragraphs consistently with clear breaks between sections and ideas, improving readability while preserving the original text. Let me know if you need further adjustments!